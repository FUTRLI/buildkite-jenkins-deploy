#!/usr/bin/env bash

checkJQInstalled () {
    if ! [ -x "$(command -v jq)" ]; then
        echo "downloading jq..."
        curl -s https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -O /usr/bin/jq

        echo "jq available at /usr/bin/jq"
    fi    
}

LAMBDA=${BUILDKITE_PLUGIN_BUILDKITE_JENKINS_DEPLOY_GIT_LAMBDA}
JOB=${BUILDKITE_PLUGIN_BUILDKITE_JENKINS_DEPLOY_GIT_JOB}
IAM_ROLE=${BUILDKITE_PLUGIN_BUILDKITE_JENKINS_DEPLOY_GIT_IAM_ROLE}
REGION=eu-west-1

PARAMETER_NAME=${BUILDKITE_PLUGIN_BUILDKITE_JENKINS_DEPLOY_GIT_PARAMETER_NAME:-deploy_sha}
PARAMETER_VALUE=${JENKINS_PARAM_TAG:-$BUILDKITE_COMMIT}

echo "Assume Role"
TEMP_ROLE=$(aws sts assume-role --role-arn="${IAM_ROLE}" --role-session-name=lambda-invoke)

AWS_ACCESS_KEY_ID="$(echo "${TEMP_ROLE}" | jq .Credentials.AccessKeyId | xargs)"
AWS_SECRET_ACCESS_KEY="$(echo "${TEMP_ROLE}" | jq .Credentials.SecretAccessKey | xargs)"
AWS_SESSION_TOKEN="$(echo "${TEMP_ROLE}" | jq .Credentials.SessionToken | xargs)"

export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY
export AWS_SESSION_TOKEN

cat << EOF > input.txt
{"jenkins_job": "${JOB}", "${PARAMETER_NAME}": "${PARAMETER_VALUE}"}
EOF

aws lambda invoke \
    --invocation-type RequestResponse \
    --function-name="${LAMBDA}" \
    --region=${REGION} \
    --payload=file://input.txt creation_response.json

sleep 60

# 90 Minutes
max_attempts=180
sleep_period=30
i=0

watch_input_file=file://creation_response.json

checkJQInstalled

while [ $i -lt $max_attempts ]
do

    if ! aws lambda invoke \
        --invocation-type RequestResponse \
        --function-name="${LAMBDA}Watcher" \
        --region=${REGION} \
        --payload=$watch_input_file status.json
    then
        exit 1
    fi

    watch_input_file=file://status.json

    ts=$(date "+%Y-%m-%d %H:%M:%S")

    deployment_status=$(jq -r .status > status.json)

    case "$deployment_status" in
    "success") echo "[$ts] Deployment succeeded"
        exit 0
        ;;
    "failure") echo "[$ts] Deployment failed"
        jq -r .reason < status.json
        exit 1
        ;;
    *) echo "[$ts] Deployment is ongoing, waiting for $sleep_period seconds"
        ;;
    esac
    i=$(( i + 1 ))
    sleep $sleep_period
done

echo "Deployment did not complete within the configured time"
exit 1
